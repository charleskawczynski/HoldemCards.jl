var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"CurrentModule = PlayingCards","category":"page"},{"location":"api/#Card","page":"API","title":"Card","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Suit\nRank\nCard\nsuit\nrank\nrank_type\nvalue\nlow_value","category":"page"},{"location":"api/#PlayingCards.Suit","page":"API","title":"PlayingCards.Suit","text":"Suit\n\nSubtypes are used for each card suit (all of which have aliases):\n\nClub    (alias ♣)\nSpade   (alias ♠)\nHeart   (alias ♡)\nDiamond (alias ♢)\n\n\n\n\n\n","category":"type"},{"location":"api/#PlayingCards.Rank","page":"API","title":"PlayingCards.Rank","text":"Rank\n\nThe card rank, subtypes are used for each card rank including\n\nAce\nKing\nQueen\nJack\nNumberCard{N} where 2 ≤ N ≤ 10\n\n\n\n\n\n","category":"type"},{"location":"api/#PlayingCards.Card","page":"API","title":"PlayingCards.Card","text":"Card{R <: Rank, S <: Suit}\n\nA playing card. Can be constructed with\n\nCard(rank, suit), or by convenience constructors. For example:\n\n2♢ (equivalent to Card(NumberCard(2), Diamond()))\nA♡ (equivalent to Card(Ace, Heart()))\n\nA 10-suit can be constructed with one of two constructors:\n\n10♣ (equivalent to Card(NumberCard(10), Club()))\n\nor\n\nT♠  (equivalent to Card(NumberCard(10), Spade()))\n\n\n\n\n\n","category":"type"},{"location":"api/#PlayingCards.suit","page":"API","title":"PlayingCards.suit","text":"suit(::Card)\n\nThe card suit (e.g., Heart, Club).\n\n\n\n\n\n","category":"function"},{"location":"api/#PlayingCards.rank","page":"API","title":"PlayingCards.rank","text":"rank(::Card)\n\nThe card rank (e.g., Ace, Jack, NumberCard{N}).\n\n\n\n\n\n","category":"function"},{"location":"api/#PlayingCards.rank_type","page":"API","title":"PlayingCards.rank_type","text":"rank_type(::Card)\n\nThe type of the rank.\n\n\n\n\n\n","category":"function"},{"location":"api/#PlayingCards.value","page":"API","title":"PlayingCards.value","text":"value(::Card)\nvalue(::Rank)\n\nThe rank value. For example:\n\nAce -> 14 (takes high value, use low_value for low value.)\nJack -> 11\nNumberCard{N} -> N\n\n\n\n\n\n","category":"function"},{"location":"api/#PlayingCards.low_value","page":"API","title":"PlayingCards.low_value","text":"low_value(::Card)\nlow_value(::Rank)\n\nThe low value of the rank (same as value except for Ace for which low_value(Card{Ace}) = 1.\n\n\n\n\n\n","category":"function"},{"location":"api/#Auxiliary-methods","page":"API","title":"Auxiliary methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"full_deck\nranks\nsuits","category":"page"},{"location":"api/#PlayingCards.full_deck","page":"API","title":"PlayingCards.full_deck","text":"full_deck\n\nA vector of a cards containing a full deck\n\n\n\n\n\n","category":"function"},{"location":"api/#PlayingCards.ranks","page":"API","title":"PlayingCards.ranks","text":"ranks\n\nA Tuple of all ranks.\n\n\n\n\n\n","category":"function"},{"location":"api/#PlayingCards.suits","page":"API","title":"PlayingCards.suits","text":"suits\n\nA Tuple of all suits\n\n\n\n\n\n","category":"function"},{"location":"api/#Deck","page":"API","title":"Deck","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Deck\nordered_deck\npop!\nshuffle!","category":"page"},{"location":"api/#PlayingCards.Deck","page":"API","title":"PlayingCards.Deck","text":"Deck\n\nDeck of cards (backed by a Vector{Card})\n\n\n\n\n\n","category":"type"},{"location":"api/#PlayingCards.ordered_deck","page":"API","title":"PlayingCards.ordered_deck","text":"ordered_deck\n\nAn ordered Deck of cards.\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.pop!","page":"API","title":"Base.pop!","text":"pop!(deck::Deck, n::Int)\n\nRemove n cards from the deck.\n\n\n\n\n\n","category":"function"},{"location":"api/#Random.shuffle!","page":"API","title":"Random.shuffle!","text":"shuffle!\n\nShuffle the deck!\n\n\n\n\n\n","category":"function"},{"location":"#PlayingCards.jl","page":"Home","title":"PlayingCards.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package for representing playing cards for card games (for a standard deck of fifty two).","category":"page"},{"location":"#Cards","page":"Home","title":"Cards","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A playing Card is consists of a rank:","category":"page"},{"location":"","page":"Home","title":"Home","text":"NumberCard(N::Int) where 2 ≤ N ≤ 10\nJack\nQueen\nKing\nAce","category":"page"},{"location":"","page":"Home","title":"Home","text":"and a suit:","category":"page"},{"location":"","page":"Home","title":"Home","text":"♣ (Club)\n♠ (Spade)\n♡ (Heart)\n♢ (Diamond)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The value of the rank can be retrieved from value and low_value:","category":"page"},{"location":"","page":"Home","title":"Home","text":"value(::Card{NumberCard{N}}) where {N} = N\nvalue(::Card{Jack}) = 11\nvalue(::Card{Queen}) = 12\nvalue(::Card{King}) = 13\nvalue(::Card{Ace}) = 14, low_value(::Card{Ace}) = 1\nvalue(card::Card) = low_value(card)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Cards have convenience constructors and methods for extracting information about them:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PlayingCards\n@show card = A♡\n@show string(card)\n@show suit(A♡)\n@show rank(A♠)\n@show value(A♢)\n@show value(J♣)\n@show low_value(A♡)","category":"page"},{"location":"#Decks","page":"Home","title":"Decks","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Deck is a struct with a Vector of Cards, which has a few convenience methods:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PlayingCards\n@show deck = ordered_deck()\n\nshuffle!(deck)\n\n@show hand = pop!(deck, 2)\n\n@show deck\nnothing","category":"page"}]
}
